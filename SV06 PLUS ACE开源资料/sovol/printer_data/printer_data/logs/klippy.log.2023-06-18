Starting Klippy...
Args: ['/home/sovol/klipper/klippy/klippy.py', '/home/sovol/printer_data/config/printer.cfg', '-I', '/home/sovol/printer_data/comms/klippy.serial', '-l', '/home/sovol/printer_data/logs/klippy.log', '-a', '/home/sovol/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-267-g12cd1d9e-dirty'
Untracked files: klippy/extras/hx711.py
Modified files: klippy/configfile.py, klippy/extras/bed_mesh.py, klippy/extras/fan.py, klippy/extras/homing.py, klippy/extras/lis2dw.py, klippy/extras/shaper_calibrate.py, klippy/extras/smart_effector.py, klippy/extras/temperature_mcu.py, klippy/klippy.py, klippy/mcu.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Sun Jun 18 14:56:41 2023 (1687100201.4 48.4)
===== Config file =====
[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = 
rename_existing = CANCEL_PRINT_BASE
gcode = 
	{% set x_park = printer['gcode_macro _global_var'].pause_park.x|float %}
	{% set y_park = printer['gcode_macro _global_var'].pause_park.y|float %}
	{% set z_park = printer['gcode_macro _global_var'].pause_park.z|float %}
	{% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
	{% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
	{% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}
	
	CANCEL_PRINT_BASE
	
	M117 Cancel Print!!!
	G91
	{% if printer['filament_switch_sensor filament_sensor'].enabled == True and
	printer['filament_switch_sensor filament_sensor'].filament_detected == True
	%}
	{% if printer.extruder.temperature >= e_mintemp %}
	G1 E-{e_restract} F500
	{% else %}
	{action_respond_info("Nozzle not hot enough")}
	{% endif %}
	{% endif %}
	
	{%if (printer.gcode_move.position.z + 10) < z_lift_max %}
	G1 Z+10 F600
	{% else %}
	G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F600
	{% endif %}
	G90
	G1 X{x_park} Y{y_park} F3000
	
	TURN_OFF_HEATERS
	_ALL_FAN_OFF
	
	CLEAR_PAUSE
	M84
	SET_GCODE_OFFSET Z=0 MOVE=1
	M117 Ready
	{action_respond_info("Cancel Print Success!")}

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	{% if printer.pause_resume.is_paused == False %}
	{% set x_park = printer['gcode_macro _global_var'].pause_park.x|float %}
	{% set y_park = printer['gcode_macro _global_var'].pause_park.y|float %}
	{% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
	{% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
	
	{% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}
	
	{action_respond_info("Pause Print!")}
	
	PAUSE_BASE
	M117 Pause Print!!!
	G91
	{% if (printer.gcode_move.position.z + 5) < z_lift_max %}
	G1 Z+5 F600
	{% else %}
	G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F600
	{% endif %}
	G90
	{% if printer.gcode_move.position.x != x_park and
	printer.gcode_move.position.y != y_park
	%}
	G1 X{x_park} Y{y_park} F{printer["gcode_macro _global_var"].pause_resume_travel_speed * 60}
	{% endif %}
	
	M104 S{printer.extruder.target}
	
	{% if state == 'normal' %}
	{% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
	{% if printer['filament_switch_sensor filament_sensor'].enabled == True and
	printer['filament_switch_sensor filament_sensor'].filament_detected == True
	%}
	G91
	G1 E-{e_restract} F300
	G90
	{% elif printer['filament_switch_sensor filament_sensor'].enabled == True and
	printer['filament_switch_sensor filament_sensor'].filament_detected != True %}
	_UNLOAD_FILAMENT_CHANGE
	{% endif %}
	{% endif %}
	{% elif state == 'filament_change' %}
	{% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
	_UNLOAD_FILAMENT
	{% endif %}
	{% endif %}
	{% endif %}
variable_state = 'normal'

[gcode_macro RESUME]
description = Pause the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	{% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
	{% set extruder_target_temp = printer.extruder.target|int %}
	
	{% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}
	
	{% if state == 'filament_change' %}
	{% if printer["filament_switch_sensor filament_sensor"].enable == True and
	printer["filament_switch_sensor filament_sensor"].filament_detected != True
	%}
	{action_respond_info("Please Insert filament in Sensor!")}
	{% else %}
	{% if printer.extruder.temperature + 5 >= printer.extruder.target %}
	G91
	G1 E30 F300
	G1 E10 F150
	G90
	{% else %}
	M104 S{extruder_target_temp}
	{action_respond_info("Nozzle not hot enough!")}
	{action_respond_info("Nozzle heating...")}
	M109 S{extruder_target_temp}
	G91
	G1 E30 F300
	G1 E10 F150
	G90
	{% endif %}
	{action_respond_info("Print resumming!")}
	RESUME_BASE
	{% endif %}
	{% elif state == 'normal' %}
	{% if printer['filament_switch_sensor filament_sensor'].enable != True and
	printer['filament_switch_sensor filament_sensor'].filament_detected != True
	%}
	{action_respond_info("Please Insert filament in Sensor!")}
	{% else %}
	{action_respond_info("Print resumming!")}
	{% if printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp %}
	G91
	G1 E{e_restract} F300
	G90
	{% endif %}
	M117 Printing now!!!
	RESUME_BASE
	{% endif %}
	{% endif %}
variable_state = 'normal'

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if not tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom','x_only','y_only'] %}
	{% set dic = {'center'      : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left'  : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right' : {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'   : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right'  : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'      : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz},
	'x_only'      : {'x': tl.park.custom.x, 'y': 'none'          , 'dz': tl.park.custom.dz},
	'y_only'      : {'x': 'none'          , 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_check_time = 0.5
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': 'X' + park.coord.x|string if park.pos != 'y_only' else '',
	'y': 'Y' + park.coord.y|string if park.pos != 'x_only' else '',
	'z': 'Z'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}
	SET_GCODE_OFFSET X=0 Y=0
	G90
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing}
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[gcode_macro _OBICO_LAYER_CHANGE]
description = Run a scan across the current print area
variable_first_layer_scan_retract_length = 6
variable_first_layer_scan_retract_speed = 15
variable_first_layer_scan_cooldown_temp = 170
variable_first_layer_scan_resume_speed = 50
variable_first_layer_scan_enabled = True
variable_first_layer_scan_stepover = 10
variable_first_layer_scan_speed = 10
variable_first_layer_scan_zhop = 4
variable_first_layer_scan_zhop_speed = 15
variable_verbose = False
variable_current_layer = -1
variable_first_layer_scanning = False
variable_wait = {'resume': "RESUME", 'absolute_coordinates': True, 'absolute_extrude': True, 'e': 0.0, 'previous_temp': 0}
gcode = 
	
	{% set pause_macro  = "PAUSE"  if printer.configfile.settings['gcode_macro pause']  is not defined
	else printer.configfile.settings['gcode_macro pause'].rename_existing %}
	{% set resume_macro = "RESUME" if printer.configfile.settings['gcode_macro resume'] is not defined
	else printer.configfile.settings['gcode_macro resume'].rename_existing %}
	
	{% set current_layer_default = printer.print_stats.info.current_layer if printer.print_stats.info.current_layer is not none else -1 %}
	{% set current_layer = params.CURRENT_LAYER|default(current_layer_default)|int %}
	
	{% set polygon_points = printer.exclude_object.objects|map(attribute='polygon')|sum(start=[]) if printer.exclude_object is defined else [] %}
	{% set min_x = params.MINX|default(polygon_points|map(attribute=0)|min|default(printer.toolhead.axis_minimum.x))|float %}
	{% set min_y = params.MINY|default(polygon_points|map(attribute=1)|min|default(printer.toolhead.axis_minimum.y))|float %}
	{% set max_x = params.MAXX|default(polygon_points|map(attribute=0)|max|default(printer.toolhead.axis_maximum.x))|float %}
	{% set max_y = params.MAXY|default(polygon_points|map(attribute=1)|max|default(printer.toolhead.axis_maximum.y))|float %}
	
	{% set stepoverCount = ((max_y - min_y) / first_layer_scan_stepover|float)|round(method='ceil')|int %}
	
	
	{% if verbose %} RESPOND PREFIX='OBICO DEBUG:' MSG='{"Layer %d" % (current_layer)}' {% endif %}
	SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=current_layer VALUE={current_layer}
	
	{% if first_layer_scan_enabled and current_layer == 2 %}
	
	SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=first_layer_scanning VALUE=True
	
	
	{% set wait_dic = {'resume'              : resume_macro,
	'absolute_coordinates': printer.gcode_move.absolute_coordinates,
	'absolute_extrude'    : printer.gcode_move.absolute_extrude,
	'e'                   : printer.gcode_move.gcode_position.e,
	'previous_temp'       : printer.extruder.target} %}
	SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=wait VALUE="{wait_dic}"
	
	{% if verbose %} RESPOND PREFIX='OBICO DEBUG:' MSG="Prepare scanning" {% endif %}
	{% if verbose %} RESPOND PREFIX='OBICO DEBUG:' MSG='{"Scan Coordinates: Min:[%.3f:%.3f] Max:[%.3f:%.3f]" % (min_x,min_y,max_x,max_y)}' {% endif %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %} RESPOND PREFIX='OBICO DEBUG:' MSG='{"Retract %.1fmm filament" % first_layer_scan_retract_length|abs}' {% endif %}
	M83
	G0 E-{first_layer_scan_retract_length|abs} F{first_layer_scan_retract_speed|float * 60}
	{% endif %}
	G91
	G0 Z{first_layer_scan_zhop|abs} F{first_layer_scan_zhop_speed|float * 60}
	
	
	M106 S255
	{% if verbose %} RESPOND PREFIX='OBICO DEBUG:' MSG='{"Fan on and lowering temperature to %.1f" % first_layer_scan_cooldown_temp}' {% endif %}
	M104 S{first_layer_scan_cooldown_temp}
	M109 S{first_layer_scan_cooldown_temp}
	
	{pause_macro}
	
	
	{% if verbose %} RESPOND PREFIX='OBICO DEBUG:' MSG="Start scanning" {% endif %}
	
	UPDATE_DELAYED_GCODE ID=_WAIT_OBICO_LAYER_CHANGE DURATION=1.0
	G90
	G0 X{min_x} Y{min_y} F{first_layer_scan_resume_speed|float * 60}
	{% for ystep in range(stepoverCount) %}
	G0 Y{min_y + first_layer_scan_stepover|float * ystep} F{first_layer_scan_speed|float * 60}
	G0 X{max_x if ystep % 2 == 0 else min_x}              F{first_layer_scan_speed|float * 60}
	{% endfor %}
	
	{% if verbose %} RESPOND PREFIX='OBICO DEBUG:' MSG="Finish scanning" {% endif %}
	
	SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=first_layer_scanning VALUE=False
	
	{% endif %}

[delayed_gcode _WAIT_OBICO_LAYER_CHANGE]
gcode = 
	{% set lc_macro = printer['gcode_macro _OBICO_LAYER_CHANGE'] %}
	{% if lc_macro.first_layer_scanning %}
	
	{% if lc_macro.verbose %} RESPOND PREFIX='OBICO DEBUG:' MSG="Waiting for first layer scan..." {% endif %}
	UPDATE_DELAYED_GCODE ID=_WAIT_OBICO_LAYER_CHANGE DURATION=1.0
	{% else %}
	
	M107
	{% if lc_macro.verbose %} RESPOND PREFIX='OBICO DEBUG:' MSG="Fan off and resume print" {% endif %}
	{% if lc_macro.verbose %} RESPOND PREFIX='OBICO DEBUG:' MSG='{"Call %s VELOCITY=%.1f" % (lc_macro.wait.resume, lc_macro.first_layer_scan_resume_speed)}' {% endif %}
	{lc_macro.wait.resume} VELOCITY={lc_macro.first_layer_scan_resume_speed}
	G91
	G0 Z-{lc_macro.first_layer_scan_zhop|abs} F{lc_macro.first_layer_scan_zhop_speed|float * 60}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% set first_layer_scan_unretract_length = lc_macro.first_layer_scan_retract_length + 0.5 %}
	{% if lc_macro.verbose %} RESPOND PREFIX='OBICO DEBUG:' MSG='{"Extrude %.1fmm filament" % first_layer_scan_unretract_length|abs}' {% endif %}
	M83
	G0 E{first_layer_scan_unretract_length|abs} F{lc_macro.first_layer_scan_retract_speed|float * 60}
	{% endif %}
	
	
	M104 S{lc_macro.wait.previous_temp}
	M109 S{lc_macro.wait.previous_temp}
	{% if lc_macro.verbose %} RESPOND PREFIX='OBICO DEBUG:' MSG='{"Heating back up to previous temperature"}' {% endif %}
	
	
	{% if lc_macro.wait.absolute_coordinates %} G90 {% endif %}
	{% if lc_macro.wait.absolute_extrude %}
	M82
	G92 E{lc_macro.wait.e}
	{% endif %}
	{% endif %}

[gcode_macro OBICO_LINK_STATUS]
description = Link to Obico server
variable_one_time_passcode = ''
variable_one_time_passlink = ''
variable_is_linked = False
gcode = 
	{action_respond_info('Obico one_time_passcode: {}'.format(one_time_passcode))}
	{action_respond_info('Obico one_time_passlink: {}'.format(one_time_passlink))}
	{action_respond_info('Obico is_linked: {}'.format(is_linked))}
	{% if not is_linked and one_time_passcode != '' %}
	M117 Code: {one_time_passcode}
	{% else %}
	M117 Obico linked
	{% endif %}

[gcode_macro _OBICO_RELINK]
description = Re-link to Obico server
gcode = 
	{action_respond_info('WARNING: Re-link to Obico server')}
	{action_call_remote_method("obico_remote_event", event_name='relink_obico', message='')}
	{action_respond_info('WARNING: relink_obico requested')}

[mcu extra_mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00
restart_method = command

[gcode_macro _global_var]
variable_pause_park = {'x': 2, 'y': 305, 'z': 10, 'e': 1}
variable_z_maximum_lifting_distance = 350
variable_pause_resume_travel_speed = 150
gcode = 

[gcode_macro _IDLE_TIMEOUT]
gcode = 
	{% if printer.print_stats.state == "paused" %}
	RESPOND TYPE=echo MSG="No operations in 10min!"
	{% else %}
	M84
	TURN_OFF_HEATERS
	{% endif %}

[gcode_macro _ALL_FAN_OFF]
gcode = 
	M106 S0
	M107

[gcode_macro CLEAN_NOZZLE]
gcode = 
	BED_MESH_CLEAR
	{% if printer.toolhead.homed_axes != "xyz" %}
	G28
	{% endif %}
	G90
	G1 X150 Y302 F9000
	M109 S200
	G28 Z
	G1 X130 Y313 F9000
	G1 Z-0.2 F600
	G1 X100 Y315 F1000
	G1 X130 Y313
	G1 X100 Y315
	G1 X130 Y313
	G1 X100 Y315
	G1 X130 Y313
	G1 Z5 F900
	G1 X70 Y310 Z0.3 F9000
	G1 Y317 F3000
	G1 X40 Y316
	G1 X80 Y315
	G1 X50 Y316
	G1 X70 Y315
	G1 X50 Y316
	G1 X70 Y315
	G1 X60 Y317
	G1 Z5
	G1 X90 Y315 F15000
	G1 Z-0.25 F900
	G1 X95 F600
	M106 S178
	M109 S130
	M107
	G1 Z5 F900
	G1 X150 Y150 F9000
	G28 Z

[gcode_macro _UNLOAD_FILAMENT_CHANGE]
gcode = 
	{% if printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp %}
	G91
	G1 E20.0   F300
	G1 E10.0   F1200
	G1 E-20.0  F3600
	M400
	G4 P5000
	G1 E-40.0  F1800
	M400
	G90
	{% else %}
	{action_respond_info("Nozzle not hot enough!")}
	{% endif %}

[gcode_macro _UNLOAD_FILAMENT]
gcode = 
	{% if printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp %}
	G91
	G1 E5.0   F300
	G1 E10.0   F1200
	G1 E-20.0  F3600
	M400
	G4 P5000
	G1 E-40.0  F1800
	M400
	G90
	{% else %}
	{action_respond_info("Nozzle not hot enough!")}
	{% endif %}

[gcode_macro _LOAD_FILAMENT]
gcode = 
	{% if printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp %}
	G91
	G1 E50.0   F300
	M400
	G90
	{% else %}
	{action_respond_info("Nozzle not hot enough!")}
	{% endif %}

[gcode_macro _CONTINUE_LOAD_FILAMENT]
gcode = 
	{% if printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp %}
	G91
	G1 E10.0   F300
	M400
	G90
	{% else %}
	{action_respond_info("Nozzle not hot enough!")}
	{% endif %}

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	CLEAN_NOZZLE
	BED_MESH_CALIBRATE ADAPTIVE=1

[gcode_macro END_PRINT]
description = 
variable_state = 'normal'
gcode = 
	{% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}
	{% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}
	
	M117 Finish Print!!!
	G91
	{% if printer['filament_switch_sensor filament_sensor'].enable == True and
	printer['filament_switch_sensor filament_sensor'].filament_detected == True
	%}
	{% if printer.extruder.temperature >= e_mintemp %}
	G1 E-2 F2700
	G1 E-2 Z0.2 F2400
	{% endif %}
	{% endif %}
	
	{% if (printer.gcode_move.position.z + 10) < z_max %}
	G1 Z+10 F600
	{% else %}
	G1 Z+{(z_max - printer.gcode_move.position.z)} F3000
	{% endif %}
	G90
	G1 X3 Y305 F3000
	
	_ALL_FAN_OFF
	TURN_OFF_HEATERS
	
	M84
	
	M220 S100
	M221 S100
	
	CLEAR_PAUSE
	SET_GCODE_OFFSET Z=0 MOVE=1
	{action_respond_info("Finish Print!")}

[delayed_gcode _resume_wait]
gcode = 
	{% if printer['gcode_macro RESUME'].execute|lower != 'false' %}
	RESUME
	{% endif %}

[gcode_macro M109]
rename_existing = M99109
gcode = 
	{% set s = params.S|float %}
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-1} MAXIMUM={s+2}
	{% endif %}

[gcode_macro M190]
rename_existing = M99190
gcode = 
	{% set s = params.S|float %}
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	{% if s != 0 %}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-1} MAXIMUM={s+2}
	{% endif %}

[gcode_macro M600]
gcode = 
	PAUSE STATE=filament_change

[mcu]
serial = /dev/ttyS1
restart_method = command

[mcu rpi]
serial = /tmp/klipper_host_mcu

[exclude_object]

[gcode_arcs]
resolution = 1.0

[temperature_sensor mcu_Temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 110

[temperature_sensor Toolhead_Temp]
sensor_type = temperature_mcu
sensor_mcu = extra_mcu
min_temp = 0
max_temp = 110

[temperature_sensor soc]
sensor_type = temperature_host
min_temp = 0
max_temp = 110

[lis2dw hotend]
cs_pin = extra_mcu:PB8
spi_software_sclk_pin = extra_mcu:PB9
spi_software_mosi_pin = extra_mcu:PB12
spi_software_miso_pin = extra_mcu:PA10
axes_map = z,x,y

[lis2dw bed]
cs_pin = rpi:None
spi_bus = spidev1.0
axes_map = x,y,z

[resonance_tester]
accel_chip_x = lis2dw hotend
accel_chip_y = lis2dw bed
probe_points = 150,150,30
accel_per_hz = 100.0
min_freq = 30
max_freq = 40
max_smoothing = 0.25
hz_per_sec = 1

[input_shaper]
damping_ratio_x = 0.001
damping_ratio_y = 0.001
shaper_type_x = mzv
shaper_freq_x = 34.4
shaper_type_y = mzv
shaper_freq_y = 33.0

[force_move]
enable_force_move = True

[hx711]
sclk_pin = extra_mcu:PB13
dout_pin = extra_mcu:PB15
single_pin = extra_mcu:PB5
hx711_diff = 0.01

[smart_effector]
pin = !extra_mcu:PB6
z_offset = -0.15
recovery_time = 0.8
x_offset = 0
y_offset = 0
speed = 3
probe_accel = 10
samples = 2
samples_result = average
sample_retract_dist = 2.0
samples_tolerance = 0.03
samples_tolerance_retries = 10

[stepper_x]
step_pin = PC2
dir_pin = !PC1
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_min = -3
position_endstop = -3
position_max = 302
homing_speed = 50
homing_retract_dist = 0
homing_positive_dir = false

[tmc2209 stepper_x]
uart_pin = PB7
run_current = 1.1
interpolate = True
driver_sgthrs = 95
stealthchop_threshold = 0
diag_pin = ^PC14

[stepper_y]
step_pin = PB4
dir_pin = PB3
enable_pin = !PB6
microsteps = 16
rotation_distance = 40
full_steps_per_rotation = 200
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_min = -5
position_endstop = -5
position_max = 320
homing_speed = 50
homing_retract_dist = 0
homing_positive_dir = false

[tmc2209 stepper_y]
uart_pin = PB5
run_current = 1.5
interpolate = True
driver_sgthrs = 110
stealthchop_threshold = 0
diag_pin = ^PC13

[stepper_z]
step_pin = PC10
dir_pin = !PA15
enable_pin = !PD2
microsteps = 16
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop
position_max = 352
position_min = -5
homing_speed = 3

[tmc2209 stepper_z]
uart_pin = PC11
run_current = 0.7
interpolate = True
stealthchop_threshold = 999999

[stepper_z1]
step_pin = PB14
dir_pin = !PB15
enable_pin = !PB10
microsteps = 16
rotation_distance = 4
endstop_pin = probe:z_virtual_endstop

[tmc2209 stepper_z1]
uart_pin = PB13
run_current = 0.7
interpolate = True
stealthchop_threshold = 999999

[extruder]
step_pin = extra_mcu:PA8
dir_pin = !extra_mcu:PA9
enable_pin = !extra_mcu:PB11
microsteps = 16
rotation_distance = 4.59
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
max_extrude_only_distance = 100
max_extrude_cross_section = 80
heater_pin = extra_mcu:PB14
sensor_type = my_thermistor_e
pullup_resistor = 11500
sensor_pin = extra_mcu:PA5
max_power = 1
control = pid
pid_kp = 19.312
pid_ki = 2.264
pid_kd = 41.721
pressure_advance = 0.03
pressure_advance_smooth_time = 0.035
min_temp = -0
max_temp = 315
min_extrude_temp = 150

[tmc2209 extruder]
uart_pin = extra_mcu:PB10
run_current = 0.6
uart_address = 3
interpolate = True

[thermistor my_thermistor_e]
temperature1 = 25
resistance1 = 110000
temperature2 = 100
resistance2 = 7008
temperature3 = 220
resistance3 = 435

[verify_heater extruder]
max_error = 120
check_gain_time = 120
hysteresis = 10
heating_gain = 2

[heater_bed]
heater_pin = PC9
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PA1
max_power = 1.0
control = pid
pid_kp = 68.327
pid_ki = 1.070
pid_kd = 1144.182
min_temp = 0
max_temp = 105

[verify_heater heater_bed]
max_error = 120
check_gain_time = 120
hysteresis = 10
heating_gain = 2

[fan]
pin = extra_mcu:PB0
max_power = 1.0
tachometer_pin = extra_mcu:PA3
tachometer_ppr = 2
tachometer_poll_interval = 0.00125

[heater_fan hotend_fan]
pin = extra_mcu:PA7
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 45
tachometer_pin = extra_mcu:PA2
tachometer_ppr = 2
tachometer_poll_interval = 0.0015

[controller_fan board_fan]
pin = PA2
fan_speed = 1.0
idle_timeout = 180
heater = heater_bed, extruder
stepper = stepper_x, stepper_y, stepper_z, stepper_z1

[filament_switch_sensor filament_sensor]
pause_on_runout = True
event_delay = 3.0
pause_delay = 0.5
switch_pin = PC8

[homing_override]
gcode = 
	{% if not 'Z' in params and not 'Y' in params and 'X' in params %}
	G28 X
	{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}
	G28 Y
	{% elif not 'Z' in params and 'X' in params and 'Y' in params %}
	G28 X
	G4 P500
	G28 Y
	{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}
	G28 Z
	G90
	G0 Z10 F300
	{% else %}
	G90
	G0 Z10 F600
	G28 X
	G28 Y
	G90
	G0  X150 Y150 F3000
	G28 Z
	G90
	G0 Z10 F600
	{% endif %}
axes = xyz
set_position_z = 0

[z_tilt]
z_positions = 10, 150
	290, 150
points = 10, 150
	290, 150
speed = 300
horizontal_move_z = 5
retries = 20
retry_tolerance = .03

[bed_mesh]
speed = 250
horizontal_move_z = 5
mesh_min = 10,10
mesh_max = 290,290
probe_count = 7,7
algorithm = bicubic
bicubic_tension = 0.5
adaptive_margin = 5
fade_start = 0.2
fade_end = 10
mesh_pps = 5,5
move_check_distance = 3.0
split_delta_z = .03

[printer]
kinematics = cartesian
max_velocity = 500
max_accel = 15000
max_accel_to_decel = 5000
max_z_velocity = 15
max_z_accel = 200
square_corner_velocity = 9.0

[idle_timeout]
gcode = _IDLE_TIMEOUT
=======================
设置的值为 8465
MKS_DEBUG:0.01
MKS_DEBUG:[0, 0, 132, 101]
MKS_DEBUG2:<mcu.MCU object at 0x7fb09f4820>
MKS_DEBUG OID:2
Extruder max_extrude_ratio=33.260135
mcu 'mcu': Starting serial connect
webhooks client 548415738064: New connection
webhooks client 548415738064: Client info {'program': 'Moonraker', 'version': 'v0.8.0-387-gb8ba6c0'}
Loaded MCU 'mcu' 125 commands (v0.12.0-267-g12cd1d9e-dirty-20240821_114929-fly-vm / gcc: (GNU Arm Embedded Toolchain 10.3-2021.10) 10.3.1 20210824 (release) binutils: (GNU Arm Embedded Toolchain 10.3-2021.10) 2.36.1.20210621)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_i2c2a=PH4,PH5 BUS_PINS_i2c3=PA8,PC9 BUS_PINS_i2c3a=PH7,PH8 BUS_PINS_sdio=PC12,PD2,PC8,PC9,PC10,PC11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi2b=PI2,PI3,PI1 BUS_PINS_spi3=PB4,PB5,PB3 BUS_PINS_spi3a=PC11,PC12,PC10 CLOCK_FREQ=168000000 MCU=stm32f407xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_crystal=PH0,PH1 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'extra_mcu': Starting serial connect
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'

Printer is not ready
The klippy host software is attempting to connect.  Please
retry in a few moments.

mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
mcu 'extra_mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f103xe_52FF6D064888824932172067-if00'
